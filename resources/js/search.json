[[{"l":"Introduction","p":["This article is still a content skeleton and not properly written out.","Welcome to the VPS-Guides collection. if you are planning to or currently trying to set up your own VPS and make yourself independant of big, centralized corporations, this collection of in-depth guides will assist you from the very start all the way to the setup apps. the guides not only cover the actual setup instructions, but also explanations what the scripts to, and even details regarding \"server hardening\", meaning protecting your server and the apps on it against outside attacks.","don't fret if you're a beginner and have barely, or even never, used linux or administrated a server. these guides start with beginners in mind and only slowly get more fast-paced. you'll learn a lot while following the instructions!","if you do not yet have a VPS, or another kind of server that you want to run your apps on, proceed to the \" First Steps\" category. Should you already have the infrastructure, either skip ahead to the app you want to set up, or skim the introductionary guides and check the security steps to make sure you've done all you can to protect your server."]}],[{"l":"Initial VPS Setup"},{"l":"Prerequisites","p":["Basic knowledge in Terminal and Linux CLI usage","Very basic knowledge of networking","5-10 $ a month for the server","5-15 $ a year for the domain name","You will create multiple accounts, for buying your domain, renting your server, and securing your VPS with Cloudflare"]},{"l":"Getting a Domain","p":["In order to properly use Vaultwarden (or any other services you'd be hosting on your server), you need a domain name. This can be pretty much anything you want that hasn't been used yet. There are countless vendors for domain names, which is why I like to use TLD-List as a starting point. You'll probably want to set the filters to something like","Cheapest Register Price: 0-20","Character Count: 2-6","Domain Level: Top-level domains","WHOIS Privacy: Supported","TLD Phase: In General Availability","Now, you can brainstorm some ideas how you could call your domain, enter it into the search box up top, and see both what that domain name would cost with different TLDs, as well as if they're still available. Keep in mind that not only the registering price matters - you'll have to renew the domain at some point, usually after a year. Don't fall for a cheap registrar price that renews at 3-10x that!","Additionally, when you found a TLD you like, click on its' label to see the list of available registrars. You should look for one that supports both free WHOIS privacy and DNS settings. While the former is only very much recommended, the latter is crucial!","Once you found something you like, go through the purchasing process as with any online purchase."]},{"l":"Getting a VPS","p":["This is a step with which I can hardly help you. There are countless VPS providers with varying price and quality. Which one you should choose depends on your region of living and your budget. Personally, I've been happy with Hetzner, who offer hosting in Europe and America. Others that I haven't tried, but who are big and known games in the server space, are Linode, Hostinger, Digital Ocean and OVHCloud, with many more options when spending some time on Google and in comparisons / benchmarks of different providers in your country. You can also check out LowEndTalk, which is an online forum for affordable hosting solutions.","The only thing you should really be looking for is a server that supports an Ubuntu image out of the box. I've yet to see a VPS provider that doesn't, but still look out for it. Regarding specs, a small spec server is more than enough. I've been running my applications on 2 shared cores, 2GB of RAM and 40GB of storage without problems. You can obviously go higher if you have the cash to do so.","After you've found a provider you're confident in and have purchased the server, you should be presented with an IP address, a username and a root password. How you get these differs between providers; sometimes they are laid out in the server dashboard, sometimes you receive them via e-mail.","Once you have these credentials on hand, open the terminal of your choice ( CMD on Windows, Terminal on Mac, Linux users know it themselves) and enter the following command:","Replace root password and ip address with their respective strings from your server dashboard. After pressing enter and a short pause, you should be connected to your server.","Should this fail, use only ssh root@ip address and enter the root password when prompted."]},{"l":"Securing the VPS","p":["We don't want your VPS to be open to the internet or easy to find, do we? Let's change some basic settings to make sure the server is tough to find and even tougher to hack."]},{"l":"Generating and installing SSH keys","p":["This step assumes you've never set up SSH keys before. If you have, make sure to not overwrite your existing keys!","As our first step, we're going to generate and install an SSH certificate. This is a much safer authentification method compared to passwords, and you won't even have to enter anything when connecting to your server. To start, you're gonna disconnect from the server with the exit command. Now, back in your local machines' terminal, run ssh-keygen -b 4096. When asked for a filepath, press enter if you don't already have SSH keys with the default name, or feel free to enter another save location. When asked for a passphrase, simply press enter twice, entering nothing. If everything went fine, the command will display the output paths for two files, along some other unrequired details.","Now, run the command ssh-copy-id -f .ssh/id_rsa.pub root@ip address, press enter, paste the root password once more, and the command should exit without errors. Should you have used another save location or file name when generating the SSH key, use that in place of .ssh/id_rsa.pub. In any case, use the file ending in .pub, not the file without a file extension!"]},{"l":"Securing the SSH access","p":["Source Guide","Now, we're going to lock down your server to make finding it much harder for bots scouring the internet. Connect to your server with the same SSH command as before, and enter the root password if prompted. Once you're connected, run nano /etc/ssh/sshd_config, which will open a long text file. Here, find the following lines, remove the leading # and change the values as written:","Make sure that these lines only exist once in the config file - I've seen them duplicated at the end of the file for some server hosters. Should that be the case, delete these duplicated lines using CTRL+Shift+K. Once you've changed the settings, press CTRL+X followed by y to save and exit. Then, run systemctl restart ssh to apply the changes. To verify that SSH daemon is now listening on the new port, run lsof -Pni | grep sshd, which should return something like this:","Where 4334 would be the port you've specified.","To finish this this section, disconnect from the server once more, returning to your local terminal, and run the command nano .ssh/config.","This command will not work on Windows, and I don't know which command will. Feel free to make a PR adding this info. Until then, you can","An empty text editor should open, in which you will paste the following text:","Replace the with any memorable shorthand you want - you will use it to connect to the server in the future. Also enter the servers' IP address and the SSH port you've specified before, and make sure the SSH key location is correct. Once done, leave the editor with the same keybinds as before ( CTRL+Shift+X followed by y).","From now on, to connect to the server, all you need to enter is ssh server name! So, as an example, if you called the server \"vps\" in your config, you'd enter ssh vps, press enter, and connect in a matter of seconds, without ever needing a password."]},{"l":"Connecting your Domain and VPS via Cloudflare","p":["Official Docs","To access your services with your domain name, we need to connect one to the other first. To help us do this securely, we'll make use of Cloudflare's DNS Proxy service, which will hide your server IP from anyone accessing your domain, increasing security by obfuscation. To start, go to https://dash.cloudflare.com/sign-up and create an account.","Once you're in the dashboard, click \"Add Site\", enter the domain name you've chosen before and select the free plan when prompted. On the next page, you should be confronted with the DNS entries on the domain - of which you probably have none. Should there be any A or AAAA entries, remove them, then add new ones, providing your servers IP address.","use A entries for IPv4 (123.456.78.9)","use AAAA entries for IPv6 (2a02:81b4:c0:27:b227:9b:::)","For each IPv4 and IPv6, make two DNS entries - one using @ as name, and one using *. This ensures that every request gets directed at your server, no matter what.","Once you're done, confirm and make note of the following page. You will now need to go to the provider where you've bought your domain name, and find the DNS settings panel. You're looking for the setting to change the domains' nameservers. Change them according to Cloudflares' instructions, and confirm on the Cloudflare page once you're done. This change can take some time to propagate. You'll need a bit of patience until it comes through, but Cloudflare will send you an e-mail once it's completed.","While this is processing, you can click through the different menus of the page and get an overview of all the things you can change. Feel free to change what you're confident you understand, or read along on the next section."]}],[{"l":"Docker Setup","p":["Official Docs"]},{"l":"Setting up Docker and Docker Compose","p":["This step is fairly simple. If you're not already, connect to your server via SSH. We're now going to run a couple of commands:","Installing some needed components","Installing the Docker repository","Installing Docker & Docker Compose","Checking both have installed properly","If these final commands go through without errors, returning some version number, everything has worked perfectly."]}],[{"l":"Reverse Proxy","p":["This is a content skeleton, and not yet properly written out."]},{"i":"what-does-a-reverse-proxy-do","l":"What does a Reverse Proxy do?","p":["allows you to access any of your apps with a subdomain or subdirectory on your domain.","eliminates requirement to open ports for different apps (with exceptions)","allows fine grained control over which traffic moves in and out of your server"]},{"l":"Common Errors when using a reverse proxy","p":["Exposing ports of applications even though you access them through a browser","not locking down your server to only take requests from the cloudflare proxy","not using proper encryption between reverse proxy and cloudflare"]},{"i":"which-reverse-proxy-should-i-use","l":"Which Reverse Proxy should I use?","p":["common ones are Nginx, Nginx Proxy Manager, Traefik and Caddy","list some pros and cons of each, shortly describing","guides are usually written with npm in mind, since its easy to use and setup","Reverse Proxy Traefik (External link) Caddy (External link)"]}],[{"l":"Nginx","p":["Official Docs"]},{"l":"Installation with Docker Compose","p":["A short explanation of this script:","As you've done before, exit nano and save your changes. Once you've left nano, run docker compose up to download and start Nginx with its components. Once the logs mention a successful startup, open your browser and enter into the address bar your server ip:81. This should bring up the NPM login screen. The login credentials are admin@example.com and changeme as the password. You will be prompted to create a new password immediately.","Domain Names: proxy.your.domain(replace your.domain with your actual domain)","For now, we will expose both port 80 and 81, which are unsecure ports that we will close down in a second.","Forward Hostname: nginx (this is the name of the container in docker)","Nginx is a reverse proxy, which we will use to direct traffic on your domain name to the different services on your server. Since the classic Nginx is entirely configured in text files, we will be using an extension called \"Nginx Proxy Manager\" or \"NPM\" for short. It automates the creation of your config files with an easy-to-use web interface and allows for a fast and easy overview and management of your hosts.","Once logged in, navigate to the green \"Proxy Hosts\" section, click \"Add Proxy Host\" in the top right, and enter the following details:","Port: 81","Press Save, then click on the domain name in your list. The URL will open in a new tab and should load you right into the NPM interface. This should have been the last time you ever access the server with its IP instead of a domain.","The container_name property manually defines the name, since the auto generated names are long and ugly. We will need to enter this into the Nginx interface in a minute!","The networks section defines two networks. the default network allows you to expose services to the internet. the internal network services exclusively for the communication between Nginx and its database.","The services section defines both the actual Nginx app, as well as the database used to store data.","The volumes section defines two volumes, which are storage locations for persistent data, since a container will be deleted with all its included data whenever you stop or restart it.","To get started with the Nginx setup, create a new folder at any location you please. As an example, we're going to use mkdir -p /home/docker/nginx, followed by cd /home/docker/nginx. Now, run nano compose.yml and paste the following code:","Toggle Common Exploits: On","You need to generate two random strings as passwords, and put them in the appropriate spots. You can do that with openssl rand -base64 20. Make sure that the password matches in the two places using random string #1!"]},{"l":"Enforcing encryption between your server and Cloudflare","p":["Official Docs","In the current setup, your server sends unencrypted content to the Cloudflare proxy, which then encrypts it locally and forwards it to the person accessing your website. This is bad, because anyone could intercept, read and modify the data before it reaches Cloudflare, as well as read all the traffic sent back to your server.","To lock this down, go to the Cloudflare Dashboard Your Website SSL/TLS Origin Server, click on Create Certificate, confirm that the hostnames are both *.your.domain and your.domain, decrease the validity to a more sensible 2 years if desired, and confirm. After a short pause, you will get two text boxes with random-looking strings in them. You need to copy the contents of both and paste them into two files on your local machine. The content of Private Key should be saved into a file called cert.key, and the content of Origin Certificate into a file called cert.pem. You can do this with any text editor, even notepad. Just make sure the file extension matches!","Once you saved them, open your Nginx dashboard, switch to SSL Certificates and Add SSL Certificate Custom. You cannot change the name later, so I recommend calling it CF your domain, in case you'll be hosting multiple domains from this server - this happens faster than you think! For the key, upload your cert.key, and for the certificate your cert.pem, and save the certificate.","Now, switch back to the Proxy Hosts tab. Edit your Nginx entry, change to the SSL Tab, and select your newly added certificate. Also, toggle the \"Force SSL\" switch - the others don't do much in your use case.","To finish this step, go back to your Cloudflare Dashboard, switch to SSL/TLS Overview, and at the very top, set the encryption mode to Full (Strict). This ensures that only traffic that has been encrypted with the specific certificate will be accepted by Cloudflare, providing maximum security for you and any other visitors of your pages.","If after this change, your Nginx dashboard still loads fine, you've done it. From now on, every little bit of traffic will be running over the encrypted port 443, so we can close the other ports still opened by Nginx. So, go back into the terminal, where the Nginx container should still be running in the foregound. Press CTRL+C to quit it, then nano compose.yml to get back into the config file. Find and remove the two lines with which Nginx exposes the ports 80 and 81.","Exit and save out of nano, then run docker compose up -d to start Nginx again, but this time in the background. Reload the Nginx website to make sure it's running and working, and run lsof -Pni | grep docker in your terminal to confirm that only port 443 is opened."]},{"l":"Important information for future apps","p":["Many people get confused about opening up their ports. Most app documentations tell you to open ports in the Docker Compose script. However, opening a port is a big security risk and defeats the purpose of a reverse proxy. Remember, you do not need to open any ports to make a service accessible to Nginx and therefore the open internet. Just add the new container to your nginx network (i.e. nginx_default), note the required port and enter both container name and port in the Nginx web interface when creating the host.","Similarly, instead of using IP addresses to refer to hosts, always use the container name, which Docker automatically resolves. This applies to Nginx hosts and apps accessing other services, for example a separated database container."]}],[],[],[{"l":"Hardening","p":["these steps are optional but very much recommended, yada yada","app guides will link back to these when they are required."]}],[{"l":"Strict Firewall"},{"l":"Short summary","p":["This is currently only a summary of what needs to be done. Maybe someone can add some guidance for iptables in the future, as a reference.","Now that we can securely access and manage the server with its domain name, we can lock it down even further to aggresively limit the connection possibilites to the bare minimum we need. In its current configuration, we will only access it by two means:","Directly from our IP to the server IP, when using SSH","Through the Cloudflare servers when accessing a website, over port 443.","This means that we can set up the server firewall to only allow connections to port 443 when they're coming from any of the Cloudflare IPs, and connections to the SSH port you set up at the start, coming from any IP. Every other connection attempt is not intended to be made, and should therefore be rejected.","To set this up, you'll need to either use your server providers firewall (if they have one), or the VPS integrated firewall. I can't write guides for every server provider, so refer to their docs for guidance. If the server provider doesn't have a separate firewall in front of your server, you can use firewalls such as iptables or ufw on your server directly, though iptables will be used for later steps anyways, so prefer that if possible. Writing a guide for this also goes beyond the (already large) scope of this guide, but this RedHat guide is a great point to start. You can find the Cloudflare IP Range here.","Summarizing what rules you need to set up (in chronological order):","Allow any IP to access your custom SSH port","Allow any IP from the Cloudflare IP List to access port 443","Drop every other request","Outgoing traffic should not be limited","Be careful to read the iptables guide in its' entirety before starting, as you can very quickly lock yourself out of the system, which would force you to reinstall the entire server and start from scratch!"]}],[{"l":"CrowdSec"},{"l":"How does it work","p":["CrowdSec functions similarly to Fail2Ban. It reads log files (or other data streams), finds failed login attempts via patterns, and bans IP addresses that repeatedly fail logins. Contrary to Fail2Ban however, it then shares the offending IP detected on your host with the global CrowdSec network and alerts any other instance of that address. Same goes for your host - once an IP attacks any host using CrowdSec, their address is automatically banned on your host as well.","CrowdSec also has a hub, where users share configurations for many different apps. This way, you rarely have to write a parser yourself, instead simply installing the configuration.","After the installation, CrowdSec will automatically start monitoring your SSH port. The default bantime is 4 hours, but that's configurable in the config file. If you want to learn more about how to configure and use CrowdSec, please refer to their documentation."]},{"l":"Installing CrowdSec","p":["Official Docs","Open your terminal, and run the following commands, one by one:","This adds the CrowdSec repository to apt, installs the CrowdSec client (which orchestrates the different components) and the firewall bouncer (which does the actual banning of IPs)."]},{"l":"Configure Firewall Bouncer","p":["The firewall bouncer needs some initial setup. To enable IPv6 support, run ip6tables -N DOCKER-USER, adding a needed IPv6 chain. Then run both iptables -L and ip6tables -L, each time checking that the entry Chain DOCKER-USER exists.","This DOCKER-USER chain is important, since it's the one Docker uses to manage access to its containers. If this chain isn't used, access to your services won't be restricted in case of a ban.","Now, run nano /etc/crowdsec/bouncers/crowdsec-firewall-bouncer.yaml to adjust the bouncer config:","Change disable_ipv6: to false","Uncomment - DOCKER-USER under iptables_chains","Save your edits and quit nano, then run systemctl restart crowdsec-firewall-bouncer to apply your changes, followed by systemctl status crowdsec-firewall-bouncer to make sure its both running and healthy. Finally, run iptables -L DOCKER-USER and ip6tables -L DOCKER-USER, each time checking that a crowdsec-blacklists rule has been applied. The name differs slightly between ip and ip6.","That's it. CrowdSec now runs in the background, monitoring your SSH logs, and will automatically ban all IPs that try to bruteforce that and any other service you connect in the future."]},{"i":"complete-file","l":":icon-file: Complete File","p":["Confirm that the highlighted lines match your file:","You can safely ignore the nftables and pf sections of the config. They refer to firewall solution that we're not using in this setup."]},{"l":"Useful Commands","p":["Run cscli metrics to get an overview of the processed files, how often failed logins were detected, how often these caused bans (called \"overflow\") and some other useful statistics","Run cscli alerts list to see all the recent bans","Use cscli decisions list to see the currently active bans","If you want to manually add an IP to ban, use cscli decisions add IP to do so. The commands' help page reveals additional options for range and duration."]}],[{"l":"AdGuard Home"},{"l":"Prerequisites","p":["Complete First Steps"]},{"l":"Introduction"},{"i":"what-is-adguard-home","l":"What is AdGuard Home?","p":["AdGuard Home is not a DNS server in the traditional sense; rather, it is a DNS proxy. It does not store a database with all DNS entries itself. Instead, it asks other \"upstream\" servers for the response. In addition, AdGuard Home can compare the incoming DNS requests to ad-blocking filter lists and block requests that point towards advertising sources.","This means two things: firstly, the upstream DNS servers resolving your requests no longer know your personal IP address and the websites visited by this IP address. They only see the IP address of your server. Additionally, AdGuard Home can spread your requests across many different upstream servers, further improving your anonymity.","Secondly, and this is the main benefit, the filter lists allow for a network-wide ad-blocking experience on every device you have, including in the browser, in apps, and in the operating systems themselves. This feature works regardless of whether the actual devices provide you the option to configure ad-blocking. Additionally, any changes made to your filter lists are automatically applied to every connected device.","Official Docs","AdGuard Home and it's multiple DNS protocols can be set up in countless ways, and the following guide is by no means the easiest or best approach. If you know exactly what you're doing and which features you want, you can get by with less steps than these.","This guide however aims at creating a fully-featured groundwork, where you can easily add or remove features at any time without having to retrace your steps and redoing half of the configuration."]},{"l":"Different DNS protocols","p":["There are four differenct methods with which a device can make a DNS request to a DNS resolver:","If you want further information on the differences, you can read this explanation"]},{"l":"DNS-over-UDP on port 53","p":["This method is unencrypted, easy to read by network providers, and when hosting your own DNS server, the port gets abused regularly. This port should not be open."]},{"l":"DNS-over-HTTPS on port 443","p":["This utilizes the same port as encrypted web traffic. By doing so, the traffic becomes completely intertwined with all other global traffic, making it difficult for both ISPs and attackers to filter out. Additionally, it can be used behind the Cloudflare proxy, although this may result in increased latency. DoH is natively supported on many devices, but requires additional software on Android phones."]},{"l":"DNS-over-TLS on port 853","p":["This method uses its own port for communication. It has to bypass the Cloudflare proxy, so if you're extremely dedicated to hiding your server's IP, do not use this method. DoT is natively supported on most devices and routers, but requires additional software on Windows."]},{"i":"dns-over-quic-on-port-8-853","l":"DNS-over-QUIC on port (8)853","p":["This uses the same port as DoT by default, but can be set to use different ports as well. It offers DoT-like encryption while promising lower latency and will require additional applications on most devices. However, this method will not be covered in these guides."]},{"l":"Which one to use","p":["The decision of which DNS method to use heavily depends on the devices you use daily. If you (or your users) use Android phones, you should offer DoT support. If you need to connect Windows devices, you should look into DoH support. Alternatively, if your home router supports one method or the other, you can use the DNS on the router level don't need to worry about your hardwired home devices anymore (e.g., TV, PC, consoles, and so on).","DoH is the easiest protocol to set up, and the other protocols build on top of the DoH requirements for their functionality. Therefore you only need to decide if you want the additional DoT support or not."]},{"l":"HTTPS Setup"},{"l":"Getting an SSL certificate","p":["To use encrypted DNS methods like DoT and DoH, you need an SSL certificate. There are many ways to acquire an SSL certificate, but since Nginx can generate and manage certificates for free and is already running anyways, we'll simply use that to do the job for us.","The Cloudflare certificate you've used on other, regular hosts is not a full certificate and cannot be used for encrypting DNS traffic. Generating a separate certificate is obligatory!","To start, go into your Nginx interface and switch to the SSL Certificates tab. Here, click on Add SSL Certificate and choose Let's Encrypt. In the popup window, enter the domain name you want to serve DNS requests on, once directly and once with a wildcard (e.g. dns.your.domain and *.dns.your.domain). Enter an email address (it should be a real one you're reachable under), tick Use a DNS Challenge and select Cloudflare as your DNS provider.","To continue, you need a Cloudflare API key, which you can create under https://dash.cloudflare.com/?to=/profile/api-tokens. On this page, click on Create Token, followed by Edit zone DNS: Use Template. On the new screen, under Zone Resources, select your domain. You can also enter your servers IP addresses (both IPv4 and IPv6) to further ensure only that server can use the API key in case it gets leaked. I've chosen to not limit this to ensure no future issues, and instead opted for not saving the API key anywhere. When you're done setting things up, click on Continue to Summary, followed by Create Token and Copy on the token field.","Now, switch back to your Nginx tab where you should still have the \"DNS Challenge\" Window open. Replace the placeholder value with your generated token. Finally, agree to the ToS and save your certificate. It might load for a while, while it's working with Cloudflare to create the certificate, but it shouldn't take too long.","Once it's done, you need to confirm the certificate ID. To do so, find the certificate in your SSL Certificate list, click on the three dots to the right and note down the number from the first line. For example, if it says Certificate #10, you need to note down the number 10."]},{"l":"AdGuard Compose file","p":["To get a basic AdGuard instance up and running, open your terminal, create a new work directory for your AdGuard config and add the compose.yml:","This will create two new volumes for AdGuards work and config files, and also mount the existing Nginx volume, which contains the SSL certificate you just created. Start the container with docker compose up -d and let it set up its configuration. Once it's done, open your Nginx interface and add a new host:","Domain Name: dns.your.domain(or whichever else you generated the SSL certificate for)","Forward Hostname: adguard","Port: 3000","Block Common Exploits: true","Select your Cloudflare SSL Certificate in the SSL tab, not the one you just generated. You can now access your admin panel under the domain you configured and go through the initial setup steps. On the first page, set the Admin interface port to 3000, while ignoring every other setting. Create your admin user at the end, finish the setup, and re-enter the apps' web address into your address bar. You should now be able to log into the AdGuard interface."]},{"l":"Encryption","p":["To enable encryption for DoH, as well as the other protocols, look at the top bar and click on Settings> Encryption Settings, and set the following values:","Enable Encryption","Server Name: the server name you want to resolve DNS requests under, e.g. dns.your.domain","Set HTTPS port to 443 and emptry the other two fields","Under certificates, click Set a file path for both options, and enter the following in the respective fields:","Earlier, you noted down the SSL certificate ID. Replace the questionmarks in npm-?? with that number.","Field 1:/opt/adguardhome/cert/live/npm-??/fullchain.pem","Field 2:/opt/adguardhome/cert/live/npm-??/privkey.pem","Adding the certificates like this has dangerous implications. AdGuard has access to all the configuration files, access logs and certificates of every single one of your hosts. Should someone find an exploit in the AdGuard dashboard, this sensitive data may be at risk.","You can directly bind-mount the certificates in the AdGuard container, but will then have to reconfigure this every time a new certificate gets generated (4 times a year). If you find a better solution, please create an issue on GitHub.","Once both fields get a green label, click on \"Save configuration\". Immediately after this, the website will no longer be reachable, which is normal. To fix it, switch back to Nginx, edit your AdGuard host configuration, and change the application port from 3000 to 443. After saving, the AdGuard website will be reachable again, and you can continue setting the app up."]},{"i":"error-certificate-chain-is-invalid","l":"**Error:** Certificate Chain is invalid","p":["If you get this error, the number you've entered is incorrect, or there was a different error reading the directory.","Make sure you've copied the filepaths from this guide properly and without missing any characters. This applies mainly to the compose.yml line 11, and the paths from the instructions above.","Ensure that you've written the number exactly like in the web interface (e.g. npm-2 instead of npm-02).","If you still cannot get it to work, you have to figure out the path from the terminal. Run the command docker exec adguard ls /opt/adguardhome/cert/live/. This should return at least one folder, including one which has the number of your certificate from the Nginx interface.","This folders' name is what you need to copy to the path in the AdGuard settings page: /opt/adguardhome/cert/live/npm-10/fullchain.pem"]},{"l":"Additional Protocols"},{"l":"DoT","p":["If you want to add DoT support to your DNS, you need to go through some additional steps to get it all working. Read more about that here.","AdGuard Home"]},{"l":"QUIC","p":["This guide has not been written yet, and will be added in the near future."]},{"l":"Further Configuration","p":["Once you've finished setting up AdGuard with the method you desire, you can continue here to finish setting up AdGuard."]},{"l":"General","p":["The settings here are quite opinionated and depend on how you want to use the instance. Should you be uncertain, feel free to fall back to these exemplatory values:","Check\"Block domains using filters\" and \"Use AdGuard browsing security\"","Check\"Enable Log\" and set a Query log retention of 24 hours","Check\"Enable Statistics\" and set a Statistics retention of 24 hours"]},{"l":"Client","p":["As mentioned in the method guides, you're able and encouraged to use Client IDs to tell apart the different devices accessing your service. This makes the logs clearer, provides better statistics, and allows to tell which devices might be accessing infected sources.","While you don't need to need to add these clients here, doing so allows you to join multiple clients into one entry ( my-phone and my-laptop as one client, and dads-phone as another client). It also allows to use different filtering settings per client, which can be useful in certain situations.","To add a persistent client, click on Add Client and enter the Client name which will show up in the interface, the client tags with which you can categorize the device, and the identifier that you're using on the device in the configured DNS address (e.g. phone from phone.dns.your.domain)."]},{"l":"DNS"},{"l":"Upstream DNS","p":["As explained in the introduction, AdGuard is dependant on other \"upstream\" DNS servers to get its responses. On this page, you enter these servers you want AdGuard to use. It is recommended to chose servers that are close to both you and your VPS for fast responses, as well as servers that have good privacy policies and support encrypted DNS channels. You should do research on the available providers in your country. As a general starting point, refer to this article.","Once you've entered your desired DNS servers, change the request mode setting to Parallel requests for maximum speed.","Under Bootstrap DNS servers, supply the unencrypted addresses of some of the major DNS providers, e.g. Cloudflare ( 1.1.1.1& 1.0.0.1), Quad9 ( 9.9.9.9& 149.112.112.112) or Google ( 8.8.8.8& 8.8.4.4). These servers will only be used to resolve the names of your main DNS servers, nothing else.","Finally, check Enable reverse resolving of clients' IP addresses for some extra information in your query logs and save."]},{"l":"DNS server configuration","p":["Set Rate limit to 6","Check Enable EDNS and Enable DNSSEC"]},{"l":"DNS cache configuration","p":["Cache Size to 10000000","Minimum TTL to 7200 (equals 2 hours)","Maximum TTL to 172800 (equals 48 hours)"]},{"l":"Access Settings","p":["If you want to limit the devices that are able to use your service, you can enter a list of Client IDs in this field. As soon as you enter a single entry here and save, access from anything not on the list will be denied, so be careful to enter every device identifier you are using."]},{"l":"Filters","p":["The DNS blocklists page under Filters contains the list of adblock-lists that the DNS server should deny access to, and is where you configure the adblocking behaviour of the server. To get started, click on Add blocklist and Choose from the list to get a handy list of sources to quickly add.","Which lists to add is very opinionated. Be aware however that higher amounts of total rules also increase the RAM consumption of the app, and negatively affect the response time of every request. Don't simply add every list there is, but pick the most efficient ones carefully. You can always check the query logs and see which lists are blocking requests and disable ones that don't do any work."]},{"l":"Final Thoughts","p":["You've finished all the steps and now have a fully functioning and ad-blocking DNS server at your hands. You can check in every once in a while and feel happiness over all the ads and trackers you've successfully blocked."]}],[{"l":"Adding DoT support"},{"l":"Adding DNS entry","p":["The Cloudflare proxies only support traffic on a limited set of ports. The DoT port is not one of these, which means we cannot route our DoT requests through the proxy. To solve this, you need to create a new, separate DNS entry in Cloudflare for the subdomain you want to serve DNS requests on. As before, we will be using dns.your.domain as our example.","To do this, open dash.cloudflare.com, navigate to your website and the DNS settings page. There, click Add record and create four entries:","Type","Name","IP","Proxy","A","dns","IPv4","DNS only","*.dns","AAAA","IPv6","The wildcard entries are required for user authentication down the line. Should your server not have an IPv4 or IPv6 address, you may skip the related entries.","It is integral to disable the Cloudflare Proxy for all of the entries you create here."]},{"l":"Adjusting the Firewall","p":["The following steps only apply to you if you've followed the instructions under Firewall Setup, or have done your own changes to the Firewall."]},{"l":"Read along","p":["Your firewall should currently only allow traffic on port 443 coming from Cloudflare IPs, and on your SSH port coming from any IP. Since DoT traffic runs on its own port 853, you need to add another firewall exception for this port and from any IP. Only then can devices anywhere freely access the DNS server.","As the firewall restricts access on port 443 to the Cloudflare servers, and the dns.your.domain DNS entry bypasses that proxy, the AdGuard dashboard is also no longer reachable under this address. The dns. subdomain is now exclusive for DNS DoT traffic, nothing else. To get back into the AdGuard page, you need to create a new, separate host for it, e.g. adguard.your.domain. It uses the same adguard hostname and 443 port as before, and the regular Cloudflare SSL certificate.","To summarize:","dns.your.domain allows access to the DoT port 853. Use this address in clients that are supposed to use DoT.","adguard.your.domain runs through Cloudflare and allows access to the AdGuard dashboard, as well as DoH.","If you want to remove this split, you have to remove the firewall rule limiting access to port 443, and allow any IP to access that port. You can then use both DoT and DoH on the dns.your.domain address. As a side-effect, DoH-requests bypass the Cloudflare proxy, reducing the response time.","Since both DoH and DoT require an encrypted connection, and therefore access via the web address, removing the restriction on port 443 should not pose any security risk. Nonetheless, if you find an alternative approach that enables only the DNS traffic to be allowed from any IP, please open a GitHub issue."]},{"l":"Exposing port 853","p":["The compose file from the main guide already had the lines for exposing port 853 included, but commented out. To use port 853, you need to expose it on the container first. To do this, open the compose.yml in your text editor, and remove the #-signs from the two lines related to the port 853:","To apply these changes, save and quit out of the editor and run docker compose up -d again. No need to shut down the container first, it will simply be recreated. If you want, you can run docker port adguard and/or lsof -Pni | grep docker to confirm that the port 853 has successfully been opened."]},{"l":"Configuring AdGuard","p":["All you need to adjust in AdGuard to allow for DoT use is adding the port in the settings page. To do this, open the dashboard, go to Settings> Encryption and enter \"853\" into the DNS-over-TLS port field. Confirm your changes with the \"Save\" button at the bottom."]},{"l":"Using AdGuards DoT","p":["With this, you've finished setting up AdGuard to resolve DoT requests. To use it, switch to the Setup Guide tab at the top, followed by the DNS Privacy tab below, and read about how to set it up on the different devices.","Note also that you're encouraged to use Client IDs, which are additional identifiers to keep apart devices, enhance logging and statistics, and enable fine-grained access controls. To use Client IDs with DoT, add an additional subdomain in front of the DNS subdomain when supplying the DNS address. For example, instead of entering dns.your.domain, enter phone.dns.your.domain. This way, the requests coming from this phone will show up as a separate entry. This will be especially important when you want to secure your server against unauthorized use.","Finishing Steps"]}],[{"l":"Vaultwarden"},{"l":"Prerequisites","p":["Complete First Steps"]},{"l":"Installing Vaultwarden","p":["As mentioned, we also need an environment variables file. You can get it from the official repo, or use this direct command to download it right into your project folder:","Change this to the domain you want to access Vaultwarden on.","DATABASE_URL specifies the database connection. It should look like this:","DISABLE_ADMIN_TOKEN=true","DOMAIN=https://vault.your.domain","In this compose file, I've specified the postgres release 14-alpine. This will be updated in the future, to 15-alpine, 16-alpine and so on. Check the official Docker repo for the latest version and update this accordingly.","Make sure to replace the password in line 20","Now, open the file with nano .env and change the following lines:","Official Docs","Some notes on this compose file:","That's pretty much it! You can now run docker compose up -d to install and run the containers, and docker compose logs -f to jump into the logs of it all to see that it works fine. By splitting the two commands, you can quit out of the logs without shutting down the container later.","The line env_file: .env specifies a separated environment file that many containers use for customization.","This will allow anyone to access the admin panel. We will lock this down at the end.","To start, make a new directory for the Vaultwarden config (e.g. mkdir /home/docker/vaultwarden), start editing with nano compose.yml and paste the following contents:","Use the <db_password> you've specified in the compose file!","Vaultwarden uses a PostgreSQL database to store all the data you provide it. This database doesn't need to be accessible from the outside world - it would be very problematic if it was. Therefore, we don't add it to the Nginx network. We create a separate network, just for the communication between Vaultwarden and the database. Nothing non-Vaultwarden should be in this network!","WEBSOCKET_ENABLED=true"]},{"l":"Exposing Vaultwarden","p":["Choose your CF Certificate in the SSL tab and activate Force SSL","Click the Cogwheel next to the Hostname and paste the following into the textbox:","Enable both Websockets Support and Block Common Exploits","Enter the domain you've specified in the .env file, e.g. vault.your.domain","Enter vaultwarden-app as the hostname, and 80 as the port","From this point onwards, you should be able to access Vaultwarden on the specified domain. You can watch the Docker logs for a bit while creating your account, to make sure there are no errors.","Hostname: vaultwarden-app","Lastly, under Custom Locations, add two entries:","Location: /notifications/hub","Location: /notifications/hub/negotiate","Now, all that's left is to set up the host in Nginx:","Open the Nginx interface, switch to Proxy Hosts and Add new Host","Port: 3012","Port: 80(or whatever port the app is running on in your case)","The first entry enables Websocket support","The second entry disables webhooks on a subdirectory","You can confirm the port from the docker logs, it might also be 3000"]},{"l":"Securing Vaultwarden with CrowdSec","p":["Vaultwarden is already very secure. It brings its own rate limiter for login attempts to combat bruteforcing, and since you're behind the Cloudflare Proxy, you're also protected from DDoS and other attacks. There's barely anything left to do, but we can go one final step. Should someone find this service and decide to bruteforce your login, we can ban their entire IP to permit access to the entire server. This will take some setup, so stay with me here."]},{"l":"Prerequisite","p":["Vaultwarden"]},{"l":"Admin Panel Setup","p":["Before we can do anything meaningful, we need to change an integral setting in the Vaultwarden Admin panel. Open Vaultwarden Admin Panel by typing in your vault web address and appending /admin to the URL (e.g. vault.your.domain/admin). This should directly lead you to the unsecured admin panel. Navigate into the Advanced Settings category and enter CF-Connecting-IP into the Client IP header field. This enables Vaultwarden to see the real IP addresses of people connecting to your instance, instead of the Cloudflare Proxys' IP.","While you're here, you can also change some other settings, like disabling new signups, or anything else you deem useful.","Save your changes with the button at the bottom, and close the tab. If you want to control that this has worked, run docker logs -f vaultwarden-app, open the Vaultwarden page and log in. Should you not have made an account yet, you can also try logging in with fake credentials. You should see your IP in the Docker logs."]},{"l":"Configuring CrowdSec","p":["The CrowdSec hub already has a helpful collection for vaultwarden that covers the entire parsing, detection and banning. To install it, run the following command:","Now, you need to add the Vaultwarden container logs to the CrowdSec Acquisition File. Run nano /etc/crowdsec/acquis.yaml to edit the file and add the following text at the end:","If you set a different container name for your Vaultwarden container, adjust that here. The label on the other hand is required by the Vaultwarden collection and has to be exactly like above.","To finish this step, run systemctl reload crowdsec. Open your Vaultwarden website once more, and log in with either real or fake credentials. Then, run cscli metrics in the terminal and confirm that docker:vaultwarden-app is listed as one of the data sources, with some lines read already.","Since you've already configured the bouncer in the CrowdSec setup, you're already finished here! CrowdSec will now monitor your login page and ban anyone who's bruteforcing the site."]},{"l":"Securing the Admin Panel","p":["As the final step, we're gonna secure the Admin Panel that's still openly accessible to the internet. This will happen entirely in the Cloudflare Dashboard, so you can minimize your terminal for now. To start, open https://one.dash.cloudflare.com/ and sign in with your credentials. It will ask you to create a company, which is not as scary as it sounds. Enter anything you want, it won't matter too much. Should it ask for a billing plan, pick the free option.","Once you're in the panel, switch to \"Access\" on the left, then \"Add an application\". Select \"Self-hosted\" as the type, then enter the following details:","Application Name:\"Vaultwarden Admin\" (or whatever else you want)","Session Duration: The duration that an authentication should be valid. Pick whatever you feel is safe. I use 60 minutes.","Application Domain: Put your Vaultwarden domain here. The subdomain ( vault for vault.domain.com) in the first field, the main domain ( domain.com) in the second field, and /admin in the third field.","Enable App in App Launcher: Off","Then click \"Next\". On the following screen, enter the following info:","Policy name:\"Mail PIN\"","Under Configure Rules> Include: Selector \"Emails\", and enter your personal mailaddress in the right field. You will receive unlock PINs to this address.","Click \"Next\" again and change the following on the final screen:","Cookie Settings> HTTP Only: On","That's it! You should be brought back to the applications list, where your admin panel now shows up. When you try opening the address from now on, you'll be prompted to enter an email address, which will receive an unlock code. Only the addresses you specified in the rules before will actually be able to receive this code."]},{"l":"Setting up Vaultwarden backups","p":["Now that your instance is highly secured, you can safely start storing your passwords there. But just to be prepared for the worst case, you should also add a backup method for your database, in case anything ever goes wrong on your server in the future. For this, you can find my backup script called run_backup.sh in this repository.","You can download it to your server by cd ing into your desired storage location (I have it next to the docker compose files for ease) and running curl -OJ https://github.com/justrainer/selfhost-guides/blob/main/vaultwarden/run_backup.sh. Then, run crontab -e and add the following line at the end:","You obviously need to adapt the location according to where you saved the script. This will run the backup script everyday at 3AM. Per default, the script saves 14 backups, meaning you get backups of the last two weeks, once every day. Feel free to change this as needed.","Technically, you should somehow move these backups completely offsite, to some separate server. You can copy them down to your local machine, rent a storage server on your provider to periodically copy the files to, mount a cloud storage account using rclone and save them to that, or deploy any other solution you want. But this goes beyond the scope of this guide."]},{"l":"Check the script"},{"l":"Closing Words","p":["That's it! Your Vaultwarden is completely secured, every common attack vector is locked down. You can now start importing or adding your passwords to this vault, invite friends and family to it, and sign into the official Bitwarden applications using your own instance!"]}]]